package com.mycompany.views.configuration.product;

import com.mycompany.interfaces.dao.CategoryDao;
import com.mycompany.interfaces.dao.SizeDao;
import com.mycompany.interfaces.dao.implementation.CategoryDaoImpl;
import com.mycompany.interfaces.dao.implementation.SizeDaoImpl;
import com.mycompany.interfaces.style.IStyleable;
import com.mycompany.models.Category;
import com.mycompany.models.CategorySize;
import com.mycompany.models.Size;
import java.awt.event.ItemListener;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class SizeConfiguration extends javax.swing.JPanel implements IStyleable {

    CategoryDao categoryDao = new CategoryDaoImpl();
    SizeDao sizeDao = new SizeDaoImpl();
    boolean isEditable = false;
    Size sizeEditable;

    public SizeConfiguration() {
        initComponents();
    }

    public SizeConfiguration(boolean lightOrDarkMode) {
        initComponents();
        updateStyles(lightOrDarkMode);
        initCategory();
    }

    @Override
    public void updateStyles(boolean isDarkModeEnabled) {
        if (isDarkModeEnabled) {

        } else {

        }
    }

    @Override
    public void initStyles() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        categoryLbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableSize = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableCategory = new javax.swing.JTable();
        cmbCategory = new javax.swing.JComboBox<>();
        sizeLbl = new javax.swing.JLabel();
        txtNewSize = new javax.swing.JTextField();
        DataUpdateBtn = new javax.swing.JButton();
        btnClean = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        includeSizeLbl = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        categoryLbl.setText("Categoria:");

        TableSize.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tallas de Categoria Seleccionada"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TableSize);

        TableCategory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre Categorias", "Incluir Talla"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableCategory.setShowGrid(true);
        TableCategory.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(TableCategory);

        cmbCategory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCategoryItemStateChanged(evt);
            }
        });

        sizeLbl.setText("Nombre de nueva talla:");

        DataUpdateBtn.setBackground(new java.awt.Color(18, 90, 173));
        DataUpdateBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        DataUpdateBtn.setForeground(new java.awt.Color(255, 255, 255));
        DataUpdateBtn.setText("Subir");
        DataUpdateBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        DataUpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataUpdateBtnActionPerformed(evt);
            }
        });

        btnClean.setBackground(new java.awt.Color(18, 90, 173));
        btnClean.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnClean.setForeground(new java.awt.Color(255, 255, 255));
        btnClean.setText("Limpiar");
        btnClean.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanActionPerformed(evt);
            }
        });

        btnEdit.setBackground(new java.awt.Color(255, 183, 44));
        btnEdit.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnEdit.setForeground(new java.awt.Color(255, 255, 255));
        btnEdit.setText("Editar");
        btnEdit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 51, 51));
        btnDelete.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Borrar");
        btnDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        includeSizeLbl.setText("Incluir nueva talla en otras categorias:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(216, 216, 216)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(includeSizeLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(169, 169, 169))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(93, 93, 93))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(categoryLbl)
                        .addGap(18, 18, 18)
                        .addComponent(cmbCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(121, 121, 121))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(sizeLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNewSize))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnEdit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnClean, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(DataUpdateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(88, 88, 88)))
                .addGap(171, 171, 171))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoryLbl)
                    .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sizeLbl)
                    .addComponent(txtNewSize, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClean, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(includeSizeLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                .addGap(15, 15, 15)
                .addComponent(DataUpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void DataUpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataUpdateBtnActionPerformed
        upData();
    }//GEN-LAST:event_DataUpdateBtnActionPerformed
    private void upData() {
        String sizeName = txtNewSize.getText().trim();
        if (sizeName.isEmpty() || sizeName.isBlank()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Introduzca el nombre de la nueva marca. \n", "ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            txtNewSize.requestFocus();
            return;
        }
        Size size = new Size(sizeName);
        traverseTable(TableCategory, size);
        try {
            sizeDao.record(size);
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(this, "Ocurrió un error. \n" + ex.getMessage(), "ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    public void traverseTable(JTable table, Size size) {
        int rowCount = table.getRowCount();
        int categoryColumn = 0;
        int checkColumn = 1;

        for (int i = 0; i < rowCount; i++) {
            Boolean checkedValue = (Boolean) table.getValueAt(i, checkColumn);

            if (Boolean.TRUE.equals(checkedValue)) {
                Category category = (Category) table.getValueAt(i, categoryColumn);
                size.addCategorySize(new CategorySize(category.getId()));
            }
        }
    }
    private void btnCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanActionPerformed
        cleanFields();
    }//GEN-LAST:event_btnCleanActionPerformed
    private void cleanFields() {
        isEditable = false;
        txtNewSize.setText("");
        sizeLbl.setText("Nombre de nueva talla:");
        DataUpdateBtn.setText("Subir");

    }
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        setEditableSize();
    }//GEN-LAST:event_btnEditActionPerformed
    private void setEditableSize() {
        if (TableSize.getSelectedRow() == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Debes seleccionar un tipo a editar. \n", "AVISO", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } else {
            sizeEditable = (Size) TableSize.getValueAt(TableSize.getSelectedRow(), 0);
            Category category = (Category) cmbCategory.getSelectedItem();

//            CategorySize categorySize = new CategorySize(category.getId(), sizeEditable.getId());
            try {
                List<Category> categoryList = sizeDao.getCategoriesBySizeSelected(sizeEditable.getId());
                loadCategoriesBySizeSelected(categoryList);
            } catch (Exception ex) {
                Logger.getLogger(SizeConfiguration.class.getName()).log(Level.SEVERE, null, ex);
            }

//            int checkColumn = 1;
//            for (int i = 0; i < TableSize.getRowCount(); i++) {
//                if(TableCategory.getValueAt(i, 0).equals(category)) {
//                    TableCategory.setValueAt(true, i, checkColumn);
//                }
//            }
            isEditable = true;
            sizeLbl.setText("Editar nombre de talla:");
            includeSizeLbl.setText("Editar talla en otras categorias:");
            DataUpdateBtn.setText("Editar");
            txtNewSize.setText(sizeEditable.getName());
        }
    }

    private void loadCategoriesBySizeSelected(List<Category> categoryList) {
        DefaultTableModel model = (DefaultTableModel) TableCategory.getModel();
        model.setRowCount(0);

        AtomicInteger index = new AtomicInteger(0);
        categoryList.forEach(c -> {
            model.addRow(new Object[]{c});
            model.setValueAt(true, index.getAndIncrement(), 1);
            model.isCellEditable(index.get(), 1);
        });
    }
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
//        deleteType();
//        cleanFields();
//        loadTypeByCategorySelected();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void cmbCategoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCategoryItemStateChanged
        loadSizeOfCategorySelected();
    }//GEN-LAST:event_cmbCategoryItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DataUpdateBtn;
    private javax.swing.JTable TableCategory;
    private javax.swing.JTable TableSize;
    private javax.swing.JButton btnClean;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JLabel categoryLbl;
    private javax.swing.JComboBox<Category> cmbCategory;
    private javax.swing.JLabel includeSizeLbl;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel sizeLbl;
    private javax.swing.JTextField txtNewSize;
    // End of variables declaration//GEN-END:variables

    private void initCategory() {
        try {
            List<Category> categoryList = categoryDao.consult();
            ItemListener[] itemListeners = cmbCategory.getListeners(ItemListener.class);
            DefaultTableModel model = (DefaultTableModel) TableCategory.getModel();
            model.setRowCount(0);

            removeEventListener(cmbCategory, itemListeners);
            categoryList.forEach(c -> {
                cmbCategory.addItem(c);
                model.addRow(new Object[]{c});
            });
            addEventListener(cmbCategory, itemListeners);
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Ocurrió un error. \n" + e.getMessage(), "ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    private void removeEventListener(JComboBox<Category> combobox, ItemListener[] itemListeners) {
        for (ItemListener itemListener : itemListeners) {
            combobox.removeItemListener(itemListener);
        }
    }

    private void addEventListener(JComboBox<Category> combobox, ItemListener[] itemListeners) {
        combobox.setSelectedIndex(-1);
        for (ItemListener itemListener : itemListeners) {
            combobox.addItemListener(itemListener);
        }
    }

    private void loadSizeOfCategorySelected() {
        try {
            DefaultTableModel model = (DefaultTableModel) TableSize.getModel();
            model.setRowCount(0);
            Category category = (Category) cmbCategory.getSelectedItem();
            List<Size> sizeList = categoryDao.getSizes(category.getId());
            sizeList.forEach(s -> model.addRow(new Object[]{s}));
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Ocurrió un error. \n" + e.getMessage(), "ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

}
