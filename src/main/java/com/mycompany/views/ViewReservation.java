package com.mycompany.views;

import com.mycompany.heycha.Dashboard;
import com.mycompany.interfaces.dao.ReservationDao;
import com.mycompany.interfaces.dao.ReservationDetailsDao;
import com.mycompany.interfaces.dao.implementation.ReservationDaoImpl;
import com.mycompany.interfaces.dao.implementation.ReservationDetailsDaoImpl;
import com.mycompany.interfaces.style.IStyleable;
import com.mycompany.models.ReservationDetail;
import java.awt.Color;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.table.DefaultTableModel;

public class ViewReservation extends javax.swing.JPanel implements IStyleable {
    
    ReservationDao reservationDao = new ReservationDaoImpl();
    ReservationDetailsDao daoDetails = new ReservationDetailsDaoImpl();
    
    boolean lightOrDarkMode;
    Integer count;
    Float totalMoney;
    
    public ViewReservation(boolean isDarkModeEnabled) {
        initComponents();
        updateStyles(isDarkModeEnabled);
        initStyles();
        loadReservations();
    }
    
    @Override
    public void initStyles() {
        title.putClientProperty("FlatLaf.styleClass", "h1");
        SaleDetailsTxt.putClientProperty("FlatLaf.styleClass", "h1");

        title.putClientProperty("FlatLaf.styleClass", "h1");

        btnAdd.putClientProperty("JButton.buttonType", "roundRect");
        btnDelete.putClientProperty("JButton.buttonType", "roundRect");
        btnEdit.putClientProperty("JButton.buttonType", "roundRect");

        btnDelete.setEnabled(true);
        btnEdit.setEnabled(true);
        JTableReservations.getTableHeader().setBackground(new Color(0, 0, 0));
        TableDetails.getTableHeader().setBackground(new Color(0, 0, 0));
        JTableReservations.getTableHeader().setForeground(new Color(255, 255, 255));
        TableDetails.getTableHeader().setForeground(new Color(255, 255, 255));
    }

    
    @Override
    public void updateStyles(boolean isDarkModeEnabled) {
        lightOrDarkMode = isDarkModeEnabled;
        if (isDarkModeEnabled) {
            title.setForeground(Color.white);
            SaleDetailsTxt.setForeground(Color.white);
            background_reserved.putClientProperty("FlatLaf.style", "background: #172030");
            btnAdd.putClientProperty("FlatLaf.style", "background: #0c9294");
            btnDelete.putClientProperty("FlatLaf.style", "background: #0c9294");
            btnEdit.putClientProperty("FlatLaf.style", "background: #0c9294");
        } else {
            title.setForeground(Color.black);
            SaleDetailsTxt.setForeground(Color.black);
            background_reserved.putClientProperty("FlatLaf.style", "background: #FFFFFF");
            btnAdd.putClientProperty("FlatLaf.style", "background: #1565C0");
            btnDelete.putClientProperty("FlatLaf.style", "background: #FF3333");
            btnEdit.putClientProperty("FlatLaf.style", "background: #FFB72C");
        }
    }
    
    private void loadReservations() {
        try {
            
            DefaultTableModel model = (DefaultTableModel) JTableReservations.getModel();
            model.setRowCount(0);
            DefaultTableModel modelDetail = (DefaultTableModel) TableDetails.getModel();
            modelDetail.setRowCount(0);
            java.util.Date utilDate = (java.util.Date) DateSpinner.getValue();
            java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
            
            count = 0; totalMoney = 0f;
            reservationDao.consult(sqlDate).forEach(
                    (r) -> {
                        model.addRow(new Object[]{r.getId(), r.getClientId(), r.getClientName(), r.getDate().format(DateTimeFormatter.ofPattern("dd-MM-yyyy")), r.getQuantitySold(), r.getPaid(), r.getRemaining(), r.getTotalMoneyEarned()});
                        count++;
                        totalMoney += r.getTotalMoneyEarned();
                    });
            TotalSalesTxt.setText(count.toString());
            TotalSalesTxt.setEditable(false);
            TotalEarnedTxt.setText(totalMoney.toString());
            TotalEarnedTxt.setEditable(false);
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Ocurri√≥ un error. \n" + e.getMessage(), "ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background_reserved = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTableReservations = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableDetails = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        TotalSalesTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        TotalEarnedTxt = new javax.swing.JTextField();
        DateSpinner = new javax.swing.JSpinner();
        SaleDetailsTxt = new javax.swing.JLabel();

        background_reserved.setBackground(new java.awt.Color(255, 255, 255));
        background_reserved.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        background_reserved.setPreferredSize(new java.awt.Dimension(764, 540));

        title.setText("Apartados");

        jScrollPane1.setBorder(null);

        JTableReservations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Apartado", "ID Cliente", "Nombre Cliente", "Fecha", "Cantidad", "Abonado", "Pendiente", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JTableReservations.setGridColor(new java.awt.Color(153, 153, 153));
        JTableReservations.setRowHeight(30);
        JTableReservations.setShowGrid(true);
        JTableReservations.getTableHeader().setReorderingAllowed(false);
        JTableReservations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JTableReservationsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(JTableReservations);

        btnAdd.setBackground(new java.awt.Color(21, 101, 192));
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Agregar");
        btnAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setBackground(new java.awt.Color(255, 183, 44));
        btnEdit.setForeground(new java.awt.Color(255, 255, 255));
        btnEdit.setText("Editar");
        btnEdit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 51, 51));
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Eliminar");
        btnDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jScrollPane2.setBorder(null);

        TableDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Producto", "Nombre del Producto", "Talla", "Precio Unidad", "Cantidad", "Subtotal"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableDetails.setGridColor(new java.awt.Color(153, 153, 153));
        TableDetails.setRowHeight(30);
        TableDetails.setShowGrid(true);
        TableDetails.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(TableDetails);

        jLabel1.setText("Apartados Pendientes:");

        jLabel2.setText("Total Ganado:");

        DateSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.MONTH));
        DateSpinner.setEditor(new javax.swing.JSpinner.DateEditor(DateSpinner, "MM/yyyy"));
        DateSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                DateSpinnerStateChanged(evt);
            }
        });

        SaleDetailsTxt.setText("Detalles de Apartados");

        javax.swing.GroupLayout background_reservedLayout = new javax.swing.GroupLayout(background_reserved);
        background_reserved.setLayout(background_reservedLayout);
        background_reservedLayout.setHorizontalGroup(
            background_reservedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(background_reservedLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(background_reservedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(background_reservedLayout.createSequentialGroup()
                        .addComponent(DateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TotalSalesTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TotalEarnedTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(164, Short.MAX_VALUE))
                    .addGroup(background_reservedLayout.createSequentialGroup()
                        .addGroup(background_reservedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(SaleDetailsTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(background_reservedLayout.createSequentialGroup()
                                .addGap(403, 403, 403)
                                .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                                .addGap(33, 33, 33)
                                .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                                .addGap(33, 33, 33)
                                .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(30, 30, 30))))
        );
        background_reservedLayout.setVerticalGroup(
            background_reservedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(background_reservedLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(background_reservedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(TotalSalesTxt, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TotalEarnedTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(DateSpinner, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SaleDetailsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(background_reservedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 764, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(background_reserved, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 436, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(background_reserved, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void DateSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_DateSpinnerStateChanged
        loadReservations();
    }//GEN-LAST:event_DateSpinnerStateChanged

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        DefaultTableModel model = (DefaultTableModel) JTableReservations.getModel();
        DefaultTableModel modelDetails = (DefaultTableModel) TableDetails.getModel();

        int rows = model.getRowCount();
        if (rows == 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "No hay venta para eliminar. \n", "AVISO", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            btnAdd.requestFocus();
            return;
        } else if (JTableReservations.getSelectedRows().length < 1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Debes seleccionar una o m√°s ventas para borrar. \n", "AVISO", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        int confirmed = javax.swing.JOptionPane.showConfirmDialog(this, "¬øEst√° seguro de eliminar estos datos? \n", "CONFIMARCI√ìN", javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE);
        if (confirmed == javax.swing.JOptionPane.YES_OPTION) {

            int[] selectedRows = JTableReservations.getSelectedRows();
            int continueDeleting;
            for (int i = selectedRows.length - 1; i >= 0; i--) {
                if (i == selectedRows.length - 4) {
                    continueDeleting = javax.swing.JOptionPane.showConfirmDialog(this, "¬øHas eliminado 3 productos, deseas continuar eliminando el resto?\n", "CONFIMARCI√ìN", javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE);
                    if (continueDeleting == javax.swing.JOptionPane.NO_OPTION) {
                        return;
                    }
                }
                // TODO
                try {

                    int selectedRow = selectedRows[i];
                    // TOOOODOOOO
                    reservationDao.delete((int) JTableReservations.getValueAt(selectedRow, 0));
                    daoDetails.deleteAll((int) JTableReservations.getValueAt(selectedRow, 0));
                    model.removeRow(selectedRow);
                    modelDetails.setRowCount(0);
                } catch (Exception e) {
                    javax.swing.JOptionPane.showMessageDialog(this, "Ocurri√≥ un error. \n" + e.getMessage(), "ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }

            javax.swing.JOptionPane.showMessageDialog(this, "Los datos se han eliminado correctamente. \n", "AVISO", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        if (JTableReservations.getSelectedRow() > -1) {
            try {
                int reservationId = (int) JTableReservations.getValueAt(JTableReservations.getSelectedRow(), 0);
                Dashboard.ShowPanel(new UpReservation(reservationDao.getReservationById(reservationId), daoDetails.consult(reservationId), lightOrDarkMode));
            } catch (Exception e) {
                javax.swing.JOptionPane.showMessageDialog(this, "Ocurri√≥ un error. \n" + e.getMessage(), "ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Debes seleccionar una venta a editar. \n", "AVISO", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        Dashboard.ShowPanel(new UpReservation(lightOrDarkMode));
    }//GEN-LAST:event_btnAddActionPerformed

    private void JTableReservationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTableReservationsMouseClicked
        loadReservationDetails();
    }//GEN-LAST:event_JTableReservationsMouseClicked
    private void loadReservationDetails() {
        List<ReservationDetail> rDetailsList;
        try {
            int selectedRows = JTableReservations.getSelectedRow();
            int reservationId = (int) JTableReservations.getValueAt(selectedRows, 0);

            DefaultTableModel newModel = (DefaultTableModel) TableDetails.getModel();
            newModel.setRowCount(0);
            rDetailsList = daoDetails.consult(reservationId);
            rDetailsList.forEach((p) -> newModel.addRow(new Object[]{p.getProductId(), p.getProductName(), p.getSizeName(), p.getPriceUnity(), p.getAmount(), p.getSubtotal()}));
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Ocurri√≥ un error. \n" + e.getMessage(), "ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner DateSpinner;
    private javax.swing.JTable JTableReservations;
    private javax.swing.JLabel SaleDetailsTxt;
    private javax.swing.JTable TableDetails;
    private javax.swing.JTextField TotalEarnedTxt;
    private javax.swing.JTextField TotalSalesTxt;
    private javax.swing.JPanel background_reserved;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables

    
}
    
