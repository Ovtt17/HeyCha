package com.mycompany.views;

import com.mycompany.interfaces.dao.implementation.ProductsDaoImpl;
import com.mycompany.interfaces.dao.implementation.ProductSizeDaoImpl;
import com.mycompany.models.Size;
import com.mycompany.models.Product;
import com.mycompany.models.SaleDetail;
import java.awt.Color;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import com.mycompany.interfaces.dao.ProductsDao;
import com.mycompany.models.ReservationDetail;
import com.mycompany.interfaces.dao.ProductSizeDao;
import com.mycompany.interfaces.style.IStyleable;
import com.mycompany.models.Brand;
import com.mycompany.models.Category;
import com.mycompany.models.ProductSize;
import java.awt.event.ItemListener;
import javax.swing.JComboBox;

public class TableSale extends javax.swing.JDialog implements IStyleable {

    boolean saleMode = false;
    UpSales upSales;
    UpReservation upReservation;

    ProductsDao productDao = new ProductsDaoImpl();

    public TableSale(java.awt.Frame parent, boolean modal, UpSales upSales, boolean darkModeStatus) {
        super(parent, modal);
        initComponents();
        this.upSales = upSales;
        saleMode = true;
        updateStyles(darkModeStatus);
        initStyles();
        loadProducts();
    }

    public TableSale(java.awt.Frame parent, boolean modal, UpReservation upReservation, boolean darkModeStatus) {
        super(parent, modal);
        initComponents();
        this.upReservation = upReservation;
        updateStyles(darkModeStatus);
        initStyles();
        loadProducts();
    }

    @Override
    public void updateStyles(boolean isDarkModeEnabled) {
        if (isDarkModeEnabled) {
            title.setForeground(Color.white);
            background_products.putClientProperty("FlatLaf.style", "background: #172030");
            btnAdd.putClientProperty("FlatLaf.style", "background: #0c9294");
            btnCleanField.putClientProperty("FlatLaf.style", "background: #0c9294");
        } else {
            title.setForeground(Color.black);
            background_products.putClientProperty("FlatLaf.style", "background: #FFFFFF");
            btnAdd.putClientProperty("FlatLaf.style", "background: #125AAD");
            btnCleanField.putClientProperty("FlatLaf.style", "background: #125AAD");
        }
    }

    @Override
    public void initStyles() {
        jTableProducts.getTableHeader().setBackground(new Color(0, 0, 0));
        TableDetails.getTableHeader().setBackground(new Color(0, 0, 0));
        jTableProducts.getTableHeader().setForeground(new Color(255, 255, 255));
        TableDetails.getTableHeader().setForeground(new Color(255, 255, 255));

        btnAdd.putClientProperty("JButton.buttonType", "roundRect");
        btnCleanField.putClientProperty("JButton.buttonType", "roundRect");

        this.setLocationRelativeTo(null);

        try {
            ItemListener[] ilBrand = BrandFilterCmb.getListeners(ItemListener.class);
            ItemListener[] ilCategories = CategoryFilterCmb.getListeners(ItemListener.class);

            removeEventListener(BrandFilterCmb, ilBrand);
            removeEventListener(CategoryFilterCmb, ilCategories);

            productDao.loadComboboxByBrand(BrandFilterCmb);
            productDao.loadComboboxByCategory(CategoryFilterCmb);

            addEventListener(BrandFilterCmb, ilBrand);
            addEventListener(CategoryFilterCmb, ilCategories);

        } catch (Exception ex) {
            Logger.getLogger(ViewProducts.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private <T> void removeEventListener(JComboBox<T> combobox, ItemListener[] itemListeners) {
        for (ItemListener itemListener : itemListeners) {
            combobox.removeItemListener(itemListener);
        }
    }

    private <T> void addEventListener(JComboBox<T> combobox, ItemListener[] itemListeners) {
        for (ItemListener itemListener : itemListeners) {
            combobox.addItemListener(itemListener);
        }
    }

    private void loadProducts() {
        DefaultTableModel model = (DefaultTableModel) jTableProducts.getModel();
        try {
            model.setRowCount(0);
            productDao.consultAllProducts()
                    .forEach((p)
                            -> model.addRow(new Object[]{p.getId(), p.getName(), p.getPrice(), p.getBrand().getName(), p.getCategory().getName(), p.getType().getName(), p.getSizeAvailable(), p.getTotalExistence(), p.getTotalPrice()}));

        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Ocurri√≥ un error. \n" + e.getMessage(), "ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background_products = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        productSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProducts = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        BrandFilterCmb = new javax.swing.JComboBox<>();
        CategoryFilterCmb = new javax.swing.JComboBox<>();
        BrandLbl = new javax.swing.JLabel();
        CategoryLbl = new javax.swing.JLabel();
        btnCleanField = new javax.swing.JButton();
        AmountSpinner = new javax.swing.JSpinner();
        amountLbl = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableDetails = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        background_products.setBackground(new java.awt.Color(255, 255, 255));
        background_products.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        background_products.setPreferredSize(new java.awt.Dimension(764, 436));

        title.setText("Productos");

        productSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                productSearchKeyReleased(evt);
            }
        });

        jScrollPane1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setRowHeaderView(null);

        jTableProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Precio", "Marca", "Categoria", "Tipo", "Tallas Disponibles", "Total Existencia", "Valor Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableProducts.setRowHeight(30);
        jTableProducts.getTableHeader().setReorderingAllowed(false);
        jTableProducts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableProductsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableProducts);

        btnAdd.setBackground(new java.awt.Color(21, 101, 192));
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Agregar");
        btnAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        BrandFilterCmb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BrandFilterCmb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                BrandFilterCmbItemStateChanged(evt);
            }
        });

        CategoryFilterCmb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CategoryFilterCmb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CategoryFilterCmbItemStateChanged(evt);
            }
        });

        BrandLbl.setText("Marca:");

        CategoryLbl.setText("Categoria:");

        btnCleanField.setBackground(new java.awt.Color(21, 101, 192));
        btnCleanField.setForeground(new java.awt.Color(255, 255, 255));
        btnCleanField.setText("Limpiar Campos");
        btnCleanField.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCleanField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanFieldActionPerformed(evt);
            }
        });

        AmountSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        amountLbl.setText("Cantidad:");

        jScrollPane2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        TableDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "ID del Producto", "Nombre del Producto", "Talla", "Precio", "Cantidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableDetails.setGridColor(new java.awt.Color(153, 153, 153));
        TableDetails.setRowHeight(30);
        TableDetails.setShowGrid(true);
        TableDetails.getTableHeader().setReorderingAllowed(false);
        TableDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableDetailsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TableDetails);

        javax.swing.GroupLayout background_productsLayout = new javax.swing.GroupLayout(background_products);
        background_products.setLayout(background_productsLayout);
        background_productsLayout.setHorizontalGroup(
            background_productsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, background_productsLayout.createSequentialGroup()
                .addGroup(background_productsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(background_productsLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(amountLbl)
                        .addGap(18, 18, 18)
                        .addComponent(AmountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(background_productsLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(background_productsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(background_productsLayout.createSequentialGroup()
                                .addComponent(productSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(BrandLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BrandFilterCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CategoryLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CategoryFilterCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCleanField))
                            .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))))
                .addGap(30, 30, 30))
        );
        background_productsLayout.setVerticalGroup(
            background_productsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(background_productsLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(background_productsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BrandFilterCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CategoryFilterCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BrandLbl)
                    .addComponent(CategoryLbl)
                    .addComponent(btnCleanField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                .addGap(53, 53, 53)
                .addGroup(background_productsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AmountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(amountLbl))
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background_products, javax.swing.GroupLayout.DEFAULT_SIZE, 1069, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background_products, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void productSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productSearchKeyReleased
        if (!BrandFilterCmb.isEnabled() || !CategoryFilterCmb.isEnabled() || !btnCleanField.isEnabled() && !productSearch.getText().isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "No puede realizar b√∫squeda dentro de los detalles de un producto. \n", "ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            productSearch.setText("");
            return;
        } else {
            filteredConsult();
        }
    }//GEN-LAST:event_productSearchKeyReleased

    private void jTableProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableProductsMouseClicked
        loadProductSize();
    }//GEN-LAST:event_jTableProductsMouseClicked
    private void loadProductSize() {
        List<ProductSize> productSizeList;
        try {
            ProductSizeDao dao = new ProductSizeDaoImpl();
            int selectedRow = jTableProducts.getSelectedRow();
            int productId = (int) jTableProducts.getValueAt(selectedRow, 0);

            DefaultTableModel model = (DefaultTableModel) TableDetails.getModel();
            model.setRowCount(0);

            productSizeList = dao.consult(productId);
            productSizeList.forEach((p) -> model.addRow(new Object[]{p.getId(), p.getProductId(), p.getProductName(), p.getSizeName(), p.getPrice(), p.getAmount()}));
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Ocurri√≥ un error. \n" + e.getMessage(), "ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
    private void BrandFilterCmbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_BrandFilterCmbItemStateChanged
        filteredConsult();
    }//GEN-LAST:event_BrandFilterCmbItemStateChanged

    private void CategoryFilterCmbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CategoryFilterCmbItemStateChanged
        filteredConsult();
    }//GEN-LAST:event_CategoryFilterCmbItemStateChanged

    private void btnCleanFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanFieldActionPerformed
        productSearch.setText("");

        ItemListener[] ilBrand = BrandFilterCmb.getListeners(ItemListener.class);
        ItemListener[] ilCategories = CategoryFilterCmb.getListeners(ItemListener.class);

        removeEventListener(BrandFilterCmb, ilBrand);
        removeEventListener(CategoryFilterCmb, ilCategories);

        BrandFilterCmb.setSelectedIndex(-1);
        CategoryFilterCmb.setSelectedIndex(-1);

        addEventListener(BrandFilterCmb, ilBrand);
        addEventListener(CategoryFilterCmb, ilCategories);
        loadProducts();
    }//GEN-LAST:event_btnCleanFieldActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        int selectedRow = TableDetails.getSelectedRow();
        if (selectedRow < 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "Debe seleccionar un producto para agregarlo al carrito. \n", "ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        Integer productSizeId = (Integer) TableDetails.getValueAt(selectedRow, 0);
        Integer productId = (Integer) TableDetails.getValueAt(selectedRow, 1);
        String productName = (String) TableDetails.getValueAt(selectedRow, 2);
        String sizeName = (String) TableDetails.getValueAt(selectedRow, 3);

        Float price = (Float) TableDetails.getValueAt(selectedRow, 4);
        Integer amount = (Integer) AmountSpinner.getValue();

        if (saleMode) {
            SaleDetail salesDetails = new SaleDetail(productSizeId, productId, productName, sizeName, price, amount);
            upSales.addProduct(salesDetails);
        } else {
            ReservationDetail rDetails = new ReservationDetail(productSizeId, productId, productName, sizeName, price, amount);
            upReservation.addProduct(rDetails);
        }

        javax.swing.JOptionPane.showMessageDialog(this, "El producto se ha agregado al carrito de compras. \n", "AVISO", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        this.dispose();
    }//GEN-LAST:event_btnAddActionPerformed

    private void TableDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableDetailsMouseClicked
        DefaultTableModel model = (DefaultTableModel) TableDetails.getModel();
        int selectedRow = TableDetails.getSelectedRow();
        String cellValue = model.getValueAt(selectedRow, 5).toString();
        int maximumAmount = Integer.parseInt(cellValue);
        SpinnerNumberModel spinnerModel = new SpinnerNumberModel(1, 1, maximumAmount, 1);
        AmountSpinner.setModel(spinnerModel);
    }//GEN-LAST:event_TableDetailsMouseClicked

    private void filteredConsult() {
        DefaultTableModel model = (DefaultTableModel) jTableProducts.getModel();
        Product product = new Product();
        model.setRowCount(0);
        product.setName(productSearch.getText().isEmpty() ? "" : productSearch.getText());

        Brand brand = BrandFilterCmb.getSelectedIndex() != -1 ? (Brand) BrandFilterCmb.getSelectedItem() : new Brand("");
        Category category = CategoryFilterCmb.getSelectedIndex() != -1 ? (Category) CategoryFilterCmb.getSelectedItem() : new Category("");

        product.setBrand(brand);
        product.setCategory(category);

        try {
            productDao.consultFiltered(product)
                    .forEach((p)
                            -> model.addRow(new Object[]{p.getId(), p.getName(), p.getPrice(), p.getBrand().getName(), p.getCategory().getName(), p.getType().getName(), p.getSizeAvailable(), p.getTotalExistence(), p.getTotalPrice()}));
        } catch (Exception ex) {
            Logger.getLogger(ViewProducts.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner AmountSpinner;
    private javax.swing.JComboBox<Brand> BrandFilterCmb;
    private javax.swing.JLabel BrandLbl;
    private javax.swing.JComboBox<Category> CategoryFilterCmb;
    private javax.swing.JLabel CategoryLbl;
    private javax.swing.JTable TableDetails;
    private javax.swing.JLabel amountLbl;
    private javax.swing.JPanel background_products;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCleanField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableProducts;
    private javax.swing.JTextField productSearch;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables

}
